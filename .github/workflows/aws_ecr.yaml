name: ECR Deployment

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: minju25kim

jobs:
  release-and-deploy:
    name: Release and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Install GitHub CLI (if not pre-installed)
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      # Step 3: Generate a new release
      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest tag and bump the version
          latest_tag=$(git tag | sort -V | tail -n 1 || echo "v0.0.0")
          new_tag=$(echo $latest_tag | awk -F. '{printf "v%d.%d.%d", $1, $2, $3+1}')
          echo "New release tag: $new_tag"
      
          # Check if the tag already exists
          if git ls-remote --tags origin | grep -q "refs/tags/$new_tag"; then
            echo "Tag $new_tag already exists. Skipping release creation."
          else
            # Create a new GitHub release
            gh release create $new_tag -t $new_tag -n "Automated release for $new_tag"
          fi
      
          # Save the new tag for later steps
          echo "release_tag=$new_tag" >> $GITHUB_ENV

      # Step 4: Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 5: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Step 6: Build, Tag, and Push Docker Image
      - name: Build, Tag, and Push Docker Image
        run: |
          docker build -f docker/production/Dockerfile -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.release_tag }} .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.release_tag }}
          echo "Image pushed with tag: ${{ env.release_tag }}"
